diff --git a/lib/ical/constants.js b/lib/ical/constants.js
index 28411ea..7867828 100644
--- a/lib/ical/constants.js
+++ b/lib/ical/constants.js
@@ -325,6 +325,40 @@ ICAL.constants = (function() {
     }
   };
 
+  exports.DOMINICAL_MAX_WEEKS_PER_YEAR = {
+    A: [ 0, 53, 52, 52, 52, 52, 52, 52 ],
+    B: [ 0, 52, 52, 52, 52, 52, 52, 53 ],
+    C: [ 0, 52, 52, 52, 52, 52, 53, 52 ],
+    D: [ 0, 52, 52, 52, 52, 53, 52, 52 ],
+    E: [ 0, 52, 52, 52, 53, 52, 52, 52 ],
+    F: [ 0, 52, 52, 53, 52, 52, 52, 52 ],
+    G: [ 0, 52, 53, 52, 52, 52, 52, 52 ],
+    AG: [ 0, 53, 53, 52, 52, 52, 52, 52 ],
+    BA: [ 0, 53, 52, 52, 52, 52, 52, 53 ],
+    CB: [ 0, 52, 52, 52, 52, 52, 53, 53 ],
+    DC: [ 0, 52, 52, 52, 52, 53, 53, 52 ],
+    ED: [ 0, 52, 52, 52, 53, 53, 52, 52 ],
+    FE: [ 0, 52, 52, 53, 53, 52, 52, 52 ],
+    GF: [ 0, 52, 53, 53, 52, 52, 52, 52 ]
+  };
+
+  exports.DOMINICAL_MAX_WEEKS_PER_MONTH = {
+    A: [0, [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5]],
+    B: [0, [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5]],
+    C: [0, [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 4, 4, 4, 4, 4, 4], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4]],
+    D: [0, [0, 4, 4, 4, 4, 5, 5, 5], [0, 4, 4, 4, 4, 4, 4, 4], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4]],
+    E: [0, [0, 4, 4, 4, 5, 5, 5, 4], [0, 4, 4, 4, 4, 4, 4, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4]],
+    F: [0, [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4]],
+    G: [0, [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5]],
+    AG: [0, [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5]],
+    BA: [0, [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5]],
+    CB: [0, [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5]],
+    DC: [0, [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 4, 4, 4, 4, 4, 4], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4]],
+    ED: [0, [0, 4, 4, 4, 5, 5, 5, 4], [0, 4, 4, 4, 4, 4, 4, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4]],
+    FE: [0, [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4]],
+    GF: [0, [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4]]
+  };
+
   var COMMON_VALID_MONTHDAYS = [-2, 536870910, -2, 2147483646, -2, 2147483646, -2, -2, 2147483646, -2, 2147483646, -2];
   var LEAP_VALID_MONTHDAYS = [-2, 1073741822, -2, 2147483646, -2, 2147483646, -2, -2, 2147483646, -2, 2147483646, -2];
 
diff --git a/lib/ical/recur_iterator.js b/lib/ical/recur_iterator.js
index 654e64f..27d3549 100644
--- a/lib/ical/recur_iterator.js
+++ b/lib/ical/recur_iterator.js
@@ -131,7 +131,11 @@ ICAL.RecurIterator = (function() {
           if (!this.by_iter.hasOwnProperty(key)) {
             continue;
           }
-          this.by_iter[key] = ByComponentIterator.fromJSON(this.by_iter[key]);
+          if (key == "BYDAY") {
+            this.by_iter[key] = BydayComponentIterator.fromJSON(this.by_iter[key], this.rule.wkst || ICAL.Time.MONDAY);
+          } else {
+            this.by_iter[key] = ByComponentIterator.fromJSON(this.by_iter[key]);
+          }
         }
       }
 
@@ -142,8 +146,7 @@ ICAL.RecurIterator = (function() {
       this.occurrence_number = options.occurrence_number || 0;
       this.last = options.last ? ICAL.helpers.formatClassType(options.last, ICAL.Time) : null;
 
-      this.by_data_byday = options.by_data_byday;
-      this.by_cache_year = options.by_cache_year;
+      this.by_cache_year = options.by_cache_year || 0;
       this.initialized = options.initialized || false;
 
       if (!this.initialized) {
@@ -211,21 +214,21 @@ ICAL.RecurIterator = (function() {
           break;
       }
 
-      var maxbyday = 0;
-      this.by_data_byday = this.by_data.BYDAY.map(function(byday) {
-        var matches = byday.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);
-        var pos = parseInt(matches[1] || 0, 10);
-        maxbyday = Math.max(maxbyday, Math.abs(pos));
-        return [pos, matches[2]];
-      });
+      if (this.by_data.BYDAY) {
+        var maxbyday = 0;
+        this.by_data.BYDAY = this.by_data.BYDAY.map(function(byday) {
+          var matches = byday.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);
+          var pos = parseInt(matches[1] || 0, 10);
+          var dow = ICAL.Recur.icalDayToNumericDay(matches[2]);
+          maxbyday = Math.max(maxbyday, Math.abs(pos));
+          return [pos, dow];
+        });
 
-      if (this.rule.freq == "MONTHLY" && maxbyday > 5) {
-        throw new Error("Malformed values in BYDAY part");
+        if (this.rule.freq == "MONTHLY" && maxbyday > 5) {
+          throw new Error("Malformed values in BYDAY part");
+        }
       }
 
-      this.by_cache = [];
-      this.by_cache_year = 0;
-
       this.by_iter = {};
       for (var bycomp in this.by_data) {
         /* istanbul ignore if */
@@ -233,7 +236,11 @@ ICAL.RecurIterator = (function() {
           continue;
         }
 
-        this.by_iter[bycomp] = new ByComponentIterator(this.by_data[bycomp]);
+        if (bycomp == "BYDAY") {
+          this.by_iter[bycomp] = new BydayComponentIterator(this.by_data[bycomp], this.rule.wkst || ICAL.Time.MONDAY);
+        } else {
+          this.by_iter[bycomp] = new ByComponentIterator(this.by_data[bycomp]);
+        }
       }
     },
 
@@ -351,6 +358,9 @@ ICAL.RecurIterator = (function() {
           this.by_iter.BYYEARDAY.max = daysInYear;
         }
 
+        this._updateMax();
+
+
         if (yday < 0) {
           yday += daysInYear + 1;
         }
@@ -416,6 +426,17 @@ ICAL.RecurIterator = (function() {
       return next;
     },
 
+    _updateMax: function() {
+      if (this.rule.freq == "YEARLY") {
+        var ltr = ICAL.Time.getDominicalLetter(this.by_cache_year);
+        //this.by_iter.BYDAY.max = ICAL.constants.DOMINICAL_MAX_WEEKS_PER_YEAR[ltr];
+      } else if (this.rule.freq == "MONTHLY") {
+        var ltr = ICAL.Time.getDominicalLetter(this.by_cache_year);
+        var month = this.by_iter.BYMONTH.peek();
+        //this.by_iter.BYDAY.max = ICAL.constatns.DOMINICAL_MAX_WEEKS_PER_YEAR[ltr][month];
+      }
+    },
+
     _initSecondly: function() {
       var bydata = this.by_data;
       var dtstart = this.dtstart;
@@ -764,10 +785,10 @@ ICAL.RecurIterator = (function() {
     _bydayMask: function(year, month) {
       // TODO caching
       var ltr = ICAL.Time.getDominicalLetter(year);
-      var bydays = this.by_data_byday;
+      var bydays = this.by_data.BYDAY;
       var byset = 0 | 0;
       for (var i = 0, bylen = bydays.length; i < bylen; i++) {
-        var prefix = bydays[i][0], weekday = bydays[i][1];
+        var prefix = bydays[i][0], weekday = ICAL.Recur.numericDayToIcalDay(bydays[i][1]); // TODO move constants to numbers
         if (prefix == 0) {
           byset |= ICAL.constants.DOMINICAL_WEEKDAY_TO_MONTHDAY_MASK[ltr][weekday][month - 1];
         } else if (this.rule.freq == "MONTHLY") {
@@ -901,7 +922,6 @@ ICAL.RecurIterator = (function() {
         result.by_iter[key] = this.by_iter[key].toJSON();
       }
 
-      result.by_data_byday = this.by_data_byday;
       result.by_cache_year = this.by_cache_year;
       result.by_cache = this.by_cache.map(String);
 
@@ -982,9 +1002,7 @@ ICAL.RecurIterator = (function() {
         }
 
         var byday = this.by_iter.BYDAY.peek();
-        var delta = (weekno - 1) * 7 +
-          ICAL.Recur.icalDayToNumericDay(byday) -
-          ICAL.Time.MONDAY;
+        var delta = (weekno - 1) * 7 + byday[1] - ICAL.Time.MONDAY;
 
         dt.day += delta;
 
@@ -1001,10 +1019,9 @@ ICAL.RecurIterator = (function() {
         dt = ICAL.Time.fromDayOfYear(yday, this.by_cache_year);
 
         // If the day, month or weekday is not valid, bail out.
-        var wday = ICAL.Recur.numericDayToIcalDay(dt.dayOfWeek());
         if (!this.by_iter.BYMONTH.has(dt.month) ||
             !this.by_iter.BYMONTHDAY.has(dt.day) ||
-            !this.by_iter.BYDAY.has(wday)) {
+            !this.by_iter.BYDAY.has(dt.dayOfWeek())) {
           return null;
         }
       } else {
@@ -1191,19 +1208,21 @@ ICAL.RecurIterator = (function() {
     },
 
     toJSON: function() {
-      return {
+      var res = {
         arr: this.arr,
         idx: this.idx,
         wrapped: this.wrapped
       };
+
+      if (this._max) {
+        res.max = this._max;
+      }
+      return res;
     },
 
     toString: function() {
       return this.arr.map(function(d, index) {
-        if (this.idx == index) {
-          return "*" + d;
-        }
-        return d;
+        return (this.idx == index ? "*" + d : "" + d);
       }, this).toString() + (this.wrapped ? "$" : "");
     }
   };
@@ -1212,6 +1231,78 @@ ICAL.RecurIterator = (function() {
     var iter = new ByComponentIterator(data.arr);
     iter.idx = data.idx;
     iter.wrapped = data.wrapped;
+    iter._max = data.max;
+    return iter;
+  };
+
+  function BydayComponentIterator(arr, wkst) {
+    ByComponentIterator.call(this, arr);
+    this.wkst = wkst;
+  }
+
+  ICAL.helpers.inherits(ByComponentIterator, BydayComponentIterator, {
+
+    _cmp: function(a, b) {
+      var apos = a[0], aday = a[1];
+      var bpos = b[0], bday = b[1];
+
+      var anormpos = apos < 0 ? this._max[aday] + apos + 1 : apos;
+      var bnormpos = bpos < 0 ? this._max[bday] + bpos + 1 : bpos;
+      var posres = (anormpos > bnormpos) - (bnormpos > anormpos);
+      if (posres != 0) {
+        return posres;
+      }
+
+      var anormday = aday - this.wkst;
+      var bnormday = bday - this.wkst;
+      if (anormday < 0) anormday += 7;
+      if (bnormday < 0) bnormday += 7;
+
+      return (anormday > bnormday) - (bnormday > anormday);
+    },
+
+    get _postiveArr() {
+      return this.arr.map(function(byday) {
+        var pos = byday[0], day = byday[1];
+        var normpos = pos < 0 ? this._max[day] + pos + 1 : pos;
+        return [normpos, day];
+      });
+    },
+    has: function(val) {
+      // On the first run, initialize the map, then replace our function with
+      // the actual finder.
+      var map = this._map = Object.create(null);
+      this.arr.forEach(function(v) {
+        map[v[0] + "-" + v[1]] = true;
+      });
+      this.has = BydayComponentIterator.prototype._hasFind;
+
+      return this._hasFind(val);
+    },
+
+    _hasFind: function(val) {
+      if (typeof val == 'number') {
+       // TODO support finding by date.
+        return (("0-" + val) in this._map);
+      } else {
+        // TODO make sure _max is set
+        var pos = val[0], day = val[1];
+        if (this._max) {
+          var normpos = pos < 0 ? this._max[day] + pos + 1 : pos;
+          return ((pos + "-" + day) in this._map) ||
+                 ((normpos + "-" + day) in this._map);
+        } else {
+          return ((pos + "-" + day) in this._map);
+        }
+      }
+    },
+  });
+
+  BydayComponentIterator.fromJSON = function(data, wkst) {
+    var iter = new BydayComponentIterator(data.arr, wkst);
+    iter.idx = data.idx;
+    iter.wrapped = data.wrapped;
+    iter._max = data.max;
     return iter;
   };
 
diff --git a/test/recur_iterator_test.js b/test/recur_iterator_test.js
index 97c8cdf..2696a23 100644
--- a/test/recur_iterator_test.js
+++ b/test/recur_iterator_test.js
@@ -127,13 +127,12 @@ suite('recur_iterator', function() {
         by_iter: {
           BYMONTH: { arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], idx: 0, wrapped: false },
           BYMONTHDAY: { arr: [1], idx: 0, wrapped: true },
-          BYDAY: { arr: ["MO", "TU", "WE", "TH", "FR", "SA", "SU"], idx: 0, wrapped: false },
+          BYDAY: { arr: [[0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 1]], idx: 0, wrapped: false },
           BYHOUR: { arr: [9], idx: 0, wrapped: true },
           BYMINUTE: { arr: [0], idx: 0, wrapped: true },
-          BYSECOND: { arr: [0], idx: 0, wrapped: true },
+          BYSECOND: { arr: [0], idx: 0, wrapped: true }
         },
 
-        by_data_byday: [[0, "MO"], [0, "TU"], [0, "WE"], [0, "TH"], [0, "FR"], [0, "SA"], [0, "SU"]],
         by_cache_year: 0,
         by_cache: []
       };
@@ -803,6 +802,20 @@ suite('recur_iterator', function() {
         ]
       });
 
+      testRRULE('FREQ=MONTHLY;BYDAY=1MO,-5TU,1TH,-4WE,2FR', {
+        dates: [
+          '2015-06-01T08:00:00',
+          '2015-06-02T08:00:00',
+          '2015-06-03T08:00:00',
+          '2015-06-04T08:00:00',
+          '2015-06-12T08:00:00',
+          '2015-07-02T08:00:00',
+          '2015-07-06T08:00:00',
+          '2015-07-08T08:00:00',
+          '2015-07-10T08:00:00'
+        ]
+      });
+
       // from rfc -> the last work day of the month
       testRRULE('FREQ=MONTHLY;BYDAY=MO,TU,WE,TH,FR;BYSETPOS=-1', {
         dates: [
