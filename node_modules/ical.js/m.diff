diff --git a/lib/ical/constants.js b/lib/ical/constants.js
index 28411ea..7867828 100644
--- a/lib/ical/constants.js
+++ b/lib/ical/constants.js
@@ -325,6 +325,40 @@ ICAL.constants = (function() {
     }
   };
 
+  exports.DOMINICAL_MAX_WEEKS_PER_YEAR = {
+    A: [ 0, 53, 52, 52, 52, 52, 52, 52 ],
+    B: [ 0, 52, 52, 52, 52, 52, 52, 53 ],
+    C: [ 0, 52, 52, 52, 52, 52, 53, 52 ],
+    D: [ 0, 52, 52, 52, 52, 53, 52, 52 ],
+    E: [ 0, 52, 52, 52, 53, 52, 52, 52 ],
+    F: [ 0, 52, 52, 53, 52, 52, 52, 52 ],
+    G: [ 0, 52, 53, 52, 52, 52, 52, 52 ],
+    AG: [ 0, 53, 53, 52, 52, 52, 52, 52 ],
+    BA: [ 0, 53, 52, 52, 52, 52, 52, 53 ],
+    CB: [ 0, 52, 52, 52, 52, 52, 53, 53 ],
+    DC: [ 0, 52, 52, 52, 52, 53, 53, 52 ],
+    ED: [ 0, 52, 52, 52, 53, 53, 52, 52 ],
+    FE: [ 0, 52, 52, 53, 53, 52, 52, 52 ],
+    GF: [ 0, 52, 53, 53, 52, 52, 52, 52 ]
+  };
+
+  exports.DOMINICAL_MAX_WEEKS_PER_MONTH = {
+    A: [0, [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5]],
+    B: [0, [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5]],
+    C: [0, [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 4, 4, 4, 4, 4, 4], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4]],
+    D: [0, [0, 4, 4, 4, 4, 5, 5, 5], [0, 4, 4, 4, 4, 4, 4, 4], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4]],
+    E: [0, [0, 4, 4, 4, 5, 5, 5, 4], [0, 4, 4, 4, 4, 4, 4, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4]],
+    F: [0, [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4]],
+    G: [0, [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5]],
+    AG: [0, [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5]],
+    BA: [0, [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5]],
+    CB: [0, [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5]],
+    DC: [0, [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 4, 4, 4, 4, 4, 4], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4]],
+    ED: [0, [0, 4, 4, 4, 5, 5, 5, 4], [0, 4, 4, 4, 4, 4, 4, 5], [0, 5, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4]],
+    FE: [0, [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 4], [0, 5, 5, 4, 4, 4, 4, 5], [0, 4, 4, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4]],
+    GF: [0, [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 4, 4], [0, 5, 4, 4, 4, 4, 5, 5], [0, 4, 5, 5, 4, 4, 4, 4], [0, 4, 4, 4, 5, 5, 5, 4], [0, 5, 4, 4, 4, 4, 4, 5], [0, 4, 5, 5, 5, 4, 4, 4], [0, 4, 4, 4, 4, 5, 5, 5], [0, 5, 5, 4, 4, 4, 4, 4], [0, 4, 4, 5, 5, 5, 4, 4], [0, 4, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 4, 4, 4, 4]]
+  };
+
   var COMMON_VALID_MONTHDAYS = [-2, 536870910, -2, 2147483646, -2, 2147483646, -2, -2, 2147483646, -2, 2147483646, -2];
   var LEAP_VALID_MONTHDAYS = [-2, 1073741822, -2, 2147483646, -2, 2147483646, -2, -2, 2147483646, -2, 2147483646, -2];
 
diff --git a/lib/ical/recur_iterator.js b/lib/ical/recur_iterator.js
index 654e64f..27d3549 100644
--- a/lib/ical/recur_iterator.js
+++ b/lib/ical/recur_iterator.js
@@ -131,7 +131,11 @@ ICAL.RecurIterator = (function() {
           if (!this.by_iter.hasOwnProperty(key)) {
             continue;
           }
-          this.by_iter[key] = ByComponentIterator.fromJSON(this.by_iter[key]);
+          if (key == "BYDAY") {
+            this.by_iter[key] = BydayComponentIterator.fromJSON(this.by_iter[key], this.rule.wkst || ICAL.Time.MONDAY);
+          } else {
+            this.by_iter[key] = ByComponentIterator.fromJSON(this.by_iter[key]);
+          }
         }
       }
 
@@ -233,7 +236,11 @@ ICAL.RecurIterator = (function() {
           continue;
         }
 
-        this.by_iter[bycomp] = new ByComponentIterator(this.by_data[bycomp]);
+        if (bycomp == "BYDAY") {
+          this.by_iter[bycomp] = new BydayComponentIterator(this.by_data[bycomp], this.rule.wkst || ICAL.Time.MONDAY);
+        } else {
+          this.by_iter[bycomp] = new ByComponentIterator(this.by_data[bycomp]);
+        }
       }
     },
 
@@ -351,6 +358,9 @@ ICAL.RecurIterator = (function() {
           this.by_iter.BYYEARDAY.max = daysInYear;
         }
 
+        this._updateMax();
+
+
         if (yday < 0) {
           yday += daysInYear + 1;
         }
@@ -416,6 +426,17 @@ ICAL.RecurIterator = (function() {
       return next;
     },
 
+    _updateMax: function() {
+      if (this.rule.freq == "YEARLY") {
+        var ltr = ICAL.Time.getDominicalLetter(this.by_cache_year);
+        //this.by_iter.BYDAY.max = ICAL.constants.DOMINICAL_MAX_WEEKS_PER_YEAR[ltr];
+      } else if (this.rule.freq == "MONTHLY") {
+        var ltr = ICAL.Time.getDominicalLetter(this.by_cache_year);
+        var month = this.by_iter.BYMONTH.peek();
+        //this.by_iter.BYDAY.max = ICAL.constatns.DOMINICAL_MAX_WEEKS_PER_YEAR[ltr][month];
+      }
+    },
+
     _initSecondly: function() {
       var bydata = this.by_data;
       var dtstart = this.dtstart;
@@ -1212,6 +1231,78 @@ ICAL.RecurIterator = (function() {
     var iter = new ByComponentIterator(data.arr);
     iter.idx = data.idx;
     iter.wrapped = data.wrapped;
+    iter._max = data.max;
+    return iter;
+  };
+
+  function BydayComponentIterator(arr, wkst) {
+    ByComponentIterator.call(this, arr);
+    this.wkst = wkst;
+  }
+
+  ICAL.helpers.inherits(ByComponentIterator, BydayComponentIterator, {
+
+    _cmp: function(a, b) {
+      var apos = a[0], aday = a[1];
+      var bpos = b[0], bday = b[1];
+
+      var anormpos = apos < 0 ? this._max[aday] + apos + 1 : apos;
+      var bnormpos = bpos < 0 ? this._max[bday] + bpos + 1 : bpos;
+      var posres = (anormpos > bnormpos) - (bnormpos > anormpos);
+      if (posres != 0) {
+        return posres;
+      }
+
+      var anormday = aday - this.wkst;
+      var bnormday = bday - this.wkst;
+      if (anormday < 0) anormday += 7;
+      if (bnormday < 0) bnormday += 7;
+
+      return (anormday > bnormday) - (bnormday > anormday);
+    },
+
+    get _postiveArr() {
+      return this.arr.map(function(byday) {
+        var pos = byday[0], day = byday[1];
+        var normpos = pos < 0 ? this._max[day] + pos + 1 : pos;
+        return [normpos, day];
+      });
+    },
+    has: function(val) {
+      // On the first run, initialize the map, then replace our function with
+      // the actual finder.
+      var map = this._map = Object.create(null);
+      this.arr.forEach(function(v) {
+        map[v[0] + "-" + v[1]] = true;
+      });
+      this.has = BydayComponentIterator.prototype._hasFind;
+
+      return this._hasFind(val);
+    },
+
+    _hasFind: function(val) {
+      if (typeof val == 'number') {
+       // TODO support finding by date.
+        return (("0-" + val) in this._map);
+      } else {
+        // TODO make sure _max is set
+        var pos = val[0], day = val[1];
+        if (this._max) {
+          var normpos = pos < 0 ? this._max[day] + pos + 1 : pos;
+          return ((pos + "-" + day) in this._map) ||
+                 ((normpos + "-" + day) in this._map);
+        } else {
+          return ((pos + "-" + day) in this._map);
+        }
+      }
+    },
+  });
+
+  BydayComponentIterator.fromJSON = function(data, wkst) {
+    var iter = new BydayComponentIterator(data.arr, wkst);
+    iter.idx = data.idx;
+    iter.wrapped = data.wrapped;
+    iter._max = data.max;
     return iter;
   };
 
