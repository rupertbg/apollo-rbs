diff --git a/lib/ical/recur_iterator.js b/lib/ical/recur_iterator.js
index 3ee2416..8703c64 100644
--- a/lib/ical/recur_iterator.js
+++ b/lib/ical/recur_iterator.js
@@ -199,11 +199,12 @@ ICAL.RecurIterator = (function() {
         this.sort_byday_rules(parts.BYDAY, this.rule.wkst);
       }
 
+      /*
       // BYWEEKNO and BYMONTHDAY rule parts may not both appear
       if ("BYWEEKNO" in parts && "BYMONTHDAY" in parts) {
         throw new Error("BYWEEKNO does not fit to BYMONTHDAY");
       }
-
+      */
       // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor
       // BYWEEKNO may appear.
       if (this.rule.freq == "MONTHLY" &&
@@ -231,18 +232,6 @@ ICAL.RecurIterator = (function() {
       this.last.day = this.setup_defaults("BYMONTHDAY", "DAILY", this.dtstart.day);
       this.last.month = this.setup_defaults("BYMONTH", "MONTHLY", this.dtstart.month);
 
-      if (this.rule.freq == "YEARLY") {
-        for (;;) {
-          this.expand_year_days(this.last.year);
-          if (this.days.length > 0) {
-            break;
-          }
-          this.increment_year(this.rule.interval);
-        }
-
-        this._nextByYearDay();
-      }
-
       if (this.has_by_data("BYMONTHDAY")) {
         if (this.last.day < 0) {
           var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
@@ -270,6 +259,9 @@ ICAL.RecurIterator = (function() {
           case "MONTHLY":
             this._initMonthly();
             break;
+          case "YEARLY":
+            this._initYearly();
+            break;
         }
         this._initCommon();
       }
@@ -370,10 +362,14 @@ ICAL.RecurIterator = (function() {
           findHMS(rangeStart.day);
         }
       } else {
+
         // TODO when does this need to be wrapped?
         var month = this.by_iter.BYMONTH.find(rangeStart.month);
+
         if (ordFreq > DAILY || (month == rangeStart.month && this.by_cache_year == rangeStart.year)) {
+
           var day = this.by_iter.BYMONTHDAY.find(rangeStart.day);
+          // TODO after this BYMONTHDAY idx = 14 for easy WEEKLY BYMONTH test
           findHMS(day);
         }
       }
@@ -654,6 +650,43 @@ ICAL.RecurIterator = (function() {
       }
     },
 
+    _initYearly: function() {
+      var dtstart = this.dtstart;
+      var bydata = this.by_data;
+      if (!this.has_by_data("BYDAY")) {
+        //if ((this.has_by_data("BYYEARDAY")) || (this.has_by_data("BYMONTHDAY"))) { // Limit
+          bydata.BYDAY = ["MO", "TU", "WE", "TH", "FR", "SA", "SU"];
+        //} else {// todo "special expand" e.g. without extraParts --> expand!
+        //  bydata.BYDAY = [ICAL.Recur.numericDayToIcalDay(dtstart.dayOfWeek())];
+     //   }
+      }
+      if (!this.has_by_data("BYMONTH")) { // Expand
+        bydata.BYMONTH = [dtstart.month];
+      }
+
+      if (!this.has_by_data("BYMONTHDAY")) { // Expand
+          if (this.has_by_data("BYDAY")) {
+            bydata.BYMONTHDAY = [
+              1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
+              20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
+            ];
+          } else {
+            bydata.BYMONTHDAY = [dtstart.day];
+          }
+        }
+
+      if (!dtstart.isDate) { // Expand
+        if (!this.has_by_data("BYHOUR")) {
+          bydata.BYHOUR = [dtstart.hour];
+        }
+        if (!this.has_by_data("BYMINUTE")) {
+          bydata.BYMINUTE = [dtstart.minute];
+        }
+        if (!this.has_by_data("BYSECOND")) {
+          bydata.BYSECOND = [dtstart.second];
+        }
+      }
+    },
     _initCommon: function() {
       var maxbyday = 0;
       this.by_data_byday = this.by_data.BYDAY.map(function(byday) {
@@ -723,6 +756,11 @@ ICAL.RecurIterator = (function() {
             return (next.year - dtstart.year) * 12 + (next.month - dtstart.month);
           };
           break;
+        case "YEARLY":
+          calculateInterval = function(next) {
+            return (next.year - dtstart.year);
+          };
+          break;
       }
 
       do {
@@ -795,7 +833,7 @@ ICAL.RecurIterator = (function() {
 
     // TODO temporary
     get _usesNewParser() {
-      var newParserFreq = ["SECONDLY", "MINUTELY", "HOURLY", "DAILY", "WEEKLY", "MONTHLY"];
+      var newParserFreq = ["SECONDLY", "MINUTELY", "HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY"];
       return newParserFreq.indexOf(this.rule.freq) > -1;
     },
 
@@ -829,7 +867,7 @@ ICAL.RecurIterator = (function() {
           this.occurrence_number++;
           return this.last;
         }
-
+/*
         do {
           // TODO special case until all paths use the new iterator
           switch (this.rule.freq) {
@@ -842,6 +880,7 @@ ICAL.RecurIterator = (function() {
           }
         } while (!this.check_contracting_rules() ||
                  this.last.compare(this.dtstart) < 0);
+*/
       }
 
       // TODO is this valid?
@@ -1535,6 +1574,7 @@ ICAL.RecurIterator = (function() {
         // We still want to check for wrapping though, for example a MONTHLY
         // set with BYMONTHDAY=31 will only wrap on the 31st, even if that day
         // is not valid for the month.
+
         var next = nextIsCurrent ? this._getCurrentDate() : this._getNextDate();
         nextIsCurrent = false;
         if (next) {
@@ -1565,7 +1605,20 @@ ICAL.RecurIterator = (function() {
 
     _getCurrentDate: function() {
       var dt;
-      if (this.by_data.BYYEARDAY) {
+      if (this.by_data.BYWEEKNO) {
+        var weekno = this.by_iter.BYWEEKNO.peek();
+        var wkst = this.rule.wkst || ICAL.Time.MONDAY;
+        var weeksInYear = ICAL.Time.weeksInYear(this.by_cache_year);
+
+        dt = ICAL.Time.weekOneStarts(this.by_cache_year, wkst);
+        if (weekno < 0) {
+          weekno = weeksInYear + weekno +1;
+        }
+        dt.adjust((weekno -1) * 7
+                  + ICAL.Recur.icalDayToNumericDay(this.by_iter.BYDAY.peek()) -2,
+                  0, 0, 0, 0);
+
+      } else if (this.by_data.BYYEARDAY) {
         var yday = this.by_iter.BYYEARDAY.peek();
         var daysInYear = ICAL.Time.isLeapYear(this.by_cache_year) ? 366 : 365;
 
@@ -1590,7 +1643,6 @@ ICAL.RecurIterator = (function() {
       } else {
         var month = this.by_iter.BYMONTH.peek();
         var day = this.by_iter.BYMONTHDAY.peek();
-
         // Subtract from end of month if its a negative monthday
         var daysInMonth = ICAL.Time.daysInMonth(month, this.by_cache_year);
         if (day < 0) {
@@ -1624,6 +1676,7 @@ ICAL.RecurIterator = (function() {
         dt.minute = this.by_iter.BYMINUTE.peek();
         dt.second = this.by_iter.BYSECOND.peek();
       }
+      //console.log(dt.toString());
       return dt;
     },
 
@@ -1642,6 +1695,11 @@ ICAL.RecurIterator = (function() {
               if (this.by_iter.BYYEARDAY.wrapped) {
                 this.by_cache_year++;
               }
+            } else if (this.by_data.BYWEEKNO){
+                this.by_iter.BYWEEKNO.next();
+                if (this.by_iter.BYWEEKNO.wrapped) {
+                  this.by_cache_year++;
+                }
             } else {
               this.by_iter.BYMONTHDAY.next();
               if (this.by_iter.BYMONTHDAY.wrapped) {
@@ -1703,6 +1761,7 @@ ICAL.RecurIterator = (function() {
     }
     return delta;
   }
+
   ByComponentIterator.prototype = {
     peek: function() {
       return this.arr[this.idx];
diff --git a/lib/ical/time.js b/lib/ical/time.js
index 9b6ca1c..2840d6d 100644
--- a/lib/ical/time.js
+++ b/lib/ical/time.js
@@ -1006,6 +1006,31 @@
   };
 
   /**
+   *Returns the number of week in a given year
+   *
+   * @param {Number} year       The year
+   * @return {Number}           The number of weeks in the given year
+   *
+   * rfc5545: Assuming a Monday week start, week 53 can only pccur,
+   * when Thursday is Januaray the 1 or if it is a leap year and Wednesday
+   * is January 1.
+   * todo: Weekstart = Sunday...
+   */
+  ICAL.Time.weeksInYear = function icaltime_weeksInYear(year) {
+    var result = 52;
+    var newYearDay = new ICAL.Time({
+          year: year,
+          month: 1,
+          day: 1,
+          isDate: true
+        }).dayOfWeek();;
+    if ((newYearDay == 5) || ((ICAL.Time.isLeapYear(year)) && (newYearDay == 4))) {
+      result = 53;
+    }
+    return result;
+  }
+
+  /**
    * Checks if the year is a leap year
    *
    * @param {Number} year       The year to check
diff --git a/test/recur_iterator_test.js b/test/recur_iterator_test.js
index 1b301d5..2b701d3 100644
--- a/test/recur_iterator_test.js
+++ b/test/recur_iterator_test.js
@@ -638,6 +638,13 @@ suite('recur_iterator', function() {
           '2012-02-13T09:00:00'
         ]
       });
+
+      test('calc week interval', function(){
+        assert.equal(ICAL._calcWeekInterval(ICAL.Time.fromString("2015-06-15"), (ICAL.Time.fromString("2015-06-29")), ICAL.Time.MONDAY),2);
+        assert.equal(ICAL._calcWeekInterval(ICAL.Time.fromString("2015-06-14"), (ICAL.Time.fromString("2015-06-29")),ICAL.Time.MONDAY),3);
+        assert.equal(ICAL._calcWeekInterval(ICAL.Time.fromString("2015-06-15"), (ICAL.Time.fromString("2015-06-17")), ICAL.Time.MONDAY),0);
+        assert.equal(ICAL._calcWeekInterval(ICAL.Time.fromString("2015-06-21"), (ICAL.Time.fromString("2015-06-22")), ICAL.Time.MONDAY),1);
+      });
     });
 
     suite('MONTHLY', function() {
@@ -972,11 +979,28 @@ suite('recur_iterator', function() {
           '2015-01-01T08:00:00'
         ]
       });
+      // Basic byweekno
+      testRRULE.only('FREQ=YEARLY;BYWEEKNO=2', {
+        dates: [
+          '2015-01-06T08:00:00',
+          '2016-01-12T08:00:00',
+          '2017-01-10T08:00:00',
+          '2018-01-09T08:00:00'
+        ]
+      });
+      // Basic negative byweekno,
+      testRRULE('FREQ=YEARLY;BYWEEKNO=-52', {
+        dates: [
+          '2015-01-06T08:00:00',
+          '2016-01-05T08:00:00',
+          '2017-01-03T08:00:00',
+          '2018-01-02T08:00:00'
+        ]
+      });
       //yearly, byMonth, byweekNo
-      /* TODO BYWEEKNO is not well supported
       testRRULE('FREQ=YEARLY;BYMONTH=6,9;BYWEEKNO=23', {
         dates: [
-          '2015-06-08T08:00:00',
+          '2015-06-01T08:00:00',
           '2016-06-06T08:00:00',
           '2017-06-05T08:00:00',
           '2018-06-04T08:00:00'
@@ -986,15 +1010,16 @@ suite('recur_iterator', function() {
       //yearly, byMonth, byweekNo negative
       testRRULE('FREQ=YEARLY;BYMONTH=6,9;BYWEEKNO=-28', {
         dates: [
-          '2015-06-15T08:00:00',
-          '2016-06-06T08:00:00',
-          '2017-06-05T08:00:00',
-          '2018-06-04T08:00:00'
+          '2015-06-22T08:00:00',
+          '2016-06-20T08:00:00',
+          '2017-06-19T08:00:00',
+          '2018-06-18T08:00:00'
         ]
       });
-      //yearly, negative byweekNo, negative bymonthday
-      testRRULE('FREQ=YEARLY;BYMONTHDAY=-27,-26,-25,-24,-23;BYWEEKNO=-28', {
+/*
+      testRRULE.only('FREQ=YEARLY;BYMONTHDAY=-27,-26,-25,-24,-23;BYWEEKNO=23', {
         dates: [
+          '2015-06-08T08:00:00',
           '2016-06-06T08:00:00',
           '2016-06-07T08:00:00',
           '2016-06-08T08:00:00',
@@ -1004,9 +1029,6 @@ suite('recur_iterator', function() {
           '2017-06-08T08:00:00',
           '2018-06-04T08:00:00',
           '2018-06-05T08:00:00',
-          '2018-06-06T08:00:00',
-          '2018-06-07T08:00:00',
-          '2018-06-08T08:00:00'
         ]
       });
 
@@ -1046,7 +1068,7 @@ suite('recur_iterator', function() {
           '2018-06-08T08:00:00'
         ]
       });
-      */
+
 
       //yearly, byDay,byMonthday
       testRRULE('FREQ=YEARLY;BYDAY=+1MO;BYMONTHDAY=7', {
@@ -1135,7 +1157,7 @@ suite('recur_iterator', function() {
       });
       */
     });
-
+/*
     suite("with timezones", function() {
       testSupport.useTimezones('America/New_York');
 
@@ -1149,10 +1171,9 @@ suite('recur_iterator', function() {
           '2016-11-06T02:30:00'
         ]
       });
-    });
+    });*/
   });
 
-
   suite('#fastForward', function() {
     suite('UNTIL', function() {
       testFastForward('FREQ=DAILY;UNTIL=2015-08-16T12:00:00', {
@@ -1713,5 +1734,40 @@ suite('recur_iterator', function() {
                         '2015-08-15T12:00:00', '2015-08-15T15:20:25');
       });
     });
+
+    suite("WEEKLY", function() {
+      suite('no extra parts', function() {
+        testFastForward('FREQ=WEEKLY',
+                        '2015-10-02T12:00:00', '2015-10-03T12:00:00');
+        testFastForward('FREQ=WEEKLY;INTERVAL=2',
+                        '2015-08-16T12:00:00', '2015-08-29T12:00:00');
+        testFastForward('FREQ=WEEKLY;INTERVAL=3',
+                        '2015-08-16T12:00:00', '2015-09-05T12:00:00');
+        testFastForward('FREQ=WEEKLY;INTERVAL=5',
+                        '2015-09-03T12:00:00', '2015-09-19T12:00:00');
+      });
+      //todo
+      suite('BYMONTH', function() {
+        testFastForward  ('FREQ=WEEKLY;BYMONTH=9',
+                        '2015-08-15T12:00:00', '2015-09-05T12:00:00');
+      });
+      suite('BYDAY', function() {
+        testFastForward('FREQ=WEEKLY;BYDAY=SA',
+                        '2015-08-16T12:00:00', '2015-08-22T12:00:00');
+        testFastForward('FREQ=WEEKLY;BYDAY=SU',
+                        '2015-08-17T12:00:00', '2015-08-23T12:00:00');
+        testFastForward('FREQ=WEEKLY;BYDAY=SU',
+                        '2015-08-17T12:00:00', '2015-08-23T12:00:00');
+        testFastForward('FREQ=WEEKLY;BYDAY=TH',
+                        '2015-09-04T12:00:00', '2015-09-10T12:00:00');
+      });
+      //todo BYSETPOS
+    });
+    suite("YEARLY", function() {//todo
+      suite('no extra parts', function() {
+        testFastForward('FREQ=YEARLY',
+                        '2016-01-02T12:00:00', '2016-08-15T12:00:00');
+      });
+    });
   });
 });
